"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rp = require("request-promise");
const crypto = require("crypto");
const url = require("url");
const DingConfig_1 = require("./DingConfig");
class DTalkApiUtil {
    /**
     * 获取钉钉企业 accessToken
     */
    async getAccessToken() {
        if (!this.expires_token || this.expires_token < Date.now() + 20 * 60 * 100) {
            console.log("getAccessToken 向钉钉服务器获取 accessToken ");
            let rt = await rp.get(`${DingConfig_1.default.openDingUrl}/gettoken?corpid=${DingConfig_1.default.corpId}&corpsecret=${DingConfig_1.default.corpsecret}`, { json: true });
            if (rt.errcode === 0) {
                this.access_token = rt.access_token;
                this.expires_token = Date.now() + 7200 * 1000;
                // await authCorp.save();
                return rt.access_token;
            }
            else {
                console.log(rt);
                // log4js.getLogger('log_error').error(rt);
            }
        }
        else {
            return this.access_token;
        }
    }
    /**
     * 获取jsapi  ticket
     */
    async getJsapi_ticket() {
        //如果有第三方应共享ticket
        if (DingConfig_1.default.ticketCb) {
            return await DingConfig_1.default.ticketCb();
        }
        let accessToken = await this.getAccessToken();
        console.log('------------------accessToken', accessToken);
        if (!this.expires || this.expires < Date.now() + 20 * 60 * 1000) {
            let json = await rp.get(`${DingConfig_1.default.openDingUrl}/get_jsapi_ticket?access_token=${accessToken}`, { json: true });
            console.log(json);
            if (json.errcode === 0) {
                this.ticket = json.ticket;
                this.expires = Date.now() + 7200 * 1000;
                // await corp.save();
                return this.ticket;
            }
            else {
                console.log("getJsApiTicket", json);
                // log4js.getLogger('log_error').error(json);
                return null;
            }
        }
        else {
            console.log("tick 未超时", this.ticket);
            return this.ticket;
        }
    }
    /**
     * jsapi 签名
     * @param nonceStr
     * @param timeStamp
     * @param origUrl
     */
    async getSign(nonceStr, timeStamp, origUrl) {
        let ticket = await this.getJsapi_ticket();
        //   corp.expires
        var origUrlObj = url.parse(origUrl);
        delete origUrlObj['hash'];
        var newUrl = url.format(origUrlObj);
        var plain = 'jsapi_ticket=' + ticket +
            '&noncestr=' + nonceStr +
            '&timestamp=' + timeStamp +
            '&url=' + newUrl;
        var sha1 = crypto.createHash('sha1');
        sha1.update(plain, 'utf8');
        var signature = sha1.digest('hex');
        return signature;
    }
    /**
     * 免登
     * @param corpId
     * @param code
     */
    async getUserInfo(code) {
        let accessToken = await this.getAccessToken();
        let json = await rp.get(`https://oapi.dingtalk.com/user/getuserinfo?access_token=${accessToken}&code=${code}`, { json: true });
        if (json.errcode === 0) {
            return json;
        }
        else {
            console.log("getUserInfo", json);
            throw json;
        }
    }
    /**
     * 获取用户信息
     * @param userId
     */
    async getUser_Info(userId) {
        let ACCESS_TOKEN = await this.getAccessToken();
        //https://oapi.dingtalk.com/user/get?access_token=ACCESS_TOKEN&userid=zhangsan
        let json = await rp.get(`${DingConfig_1.default.openDingUrl}/user/get?access_token=${ACCESS_TOKEN}&userid=${userId}`, { json: true });
        if (json.errcode === 0) {
            return json;
        }
        else {
            throw json;
        }
    }
}
exports.DTalkApiUtil = DTalkApiUtil;
let dTalkApiUtil = new DTalkApiUtil();
exports.default = dTalkApiUtil;
