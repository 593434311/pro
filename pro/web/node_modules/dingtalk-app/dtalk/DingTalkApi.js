"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jwt = require("jsonwebtoken");
const DingConfig_1 = require("./DingConfig");
const dTalkApiUtil_1 = require("./dTalkApiUtil");
class DingTalkApi {
    /**
     * 免登
     * @param authCode 临时授权码
     */
    async login(authCode, ...userField) {
        let user = await dTalkApiUtil_1.default.getUserInfo(authCode);
        let userJson = await dTalkApiUtil_1.default.getUser_Info(user.userid);
        let userinfo = { userId: user.userid, is_sys: user.is_sys, sys_level: user.sys_level, jobnumber: userJson.jobnumber, name: userJson.name };
        userField.map((item) => {
            userinfo[item] = userJson[item];
        });
        if (user) {
            // let doorKepper = await doorKeeperModel.findOne({ corpId: corpId, userId: user.userid });
            let token = jwt.sign(userinfo, DingConfig_1.default.noncestr, { expiresIn: DingConfig_1.default.expiresIn });
            return { token: `Bearer ${token}`, user: userinfo };
        }
        else {
            throw ('认证失败！');
        }
    }
    /**
     * 生程客户端js api 签名
     * @param querystring url参数
     */
    async signature(querystring, domain) {
        let corpId = DingConfig_1.default.corpId;
        let nonceStr = "abcd" + (Math.random() * 1000).toFixed(0); //签名随机数
        var timeStamp = Date.now();
        let url = `${domain || DingConfig_1.default.domain}${querystring ? querystring : ''}`; //后期处理
        // url += '&dd_progress=false';
        // log4js.getLogger('log_info').info('签名url', url);
        console.log('签名url', url);
        let signedUrl = decodeURIComponent(url);
        let signStr = await dTalkApiUtil_1.default.getSign(nonceStr, timeStamp, signedUrl);
        let config = {
            agentId: DingConfig_1.default.agentId,
            corpId: corpId,
            timeStamp: timeStamp,
            nonceStr: nonceStr,
            signature: signStr,
            type: 0 //选填。0表示微应用的jsapi,1表示服务窗的jsapi。不填默认为0。该参数从dingtalk.js的0.8.3版本开始支持
        };
        return config;
    }
    /**
    * 解析token
    * @param authorization
    */
    decode(authorization) {
        let token = authorization.substr(7);
        let auth = jwt.decode(token, DingConfig_1.default.noncestr);
        return auth;
    }
}
exports.DingTalkApi = DingTalkApi;
let dingTalkApi = new DingTalkApi();
exports.default = dingTalkApi;
